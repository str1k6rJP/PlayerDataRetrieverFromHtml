package parser.controllers;


import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.jsoup.nodes.Document;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import parser.beans.Player;
import parser.beans.Team;
import parser.services.HTMLParserService;
import parser.services.client.HttpClient;

import java.io.IOException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequiredArgsConstructor
@RequestMapping("/autofill")
@Slf4j
public class ParserController {

    /**
     * Template for most messages about retrieval/saving generated by means of {@link String#format(String, Object...)}
     * First placeholder is for quantifier (5,10 zero, no, all etc.)
     * Second one is for entities' type (players/teams)
     * Third marks action type (saving/retrieval)
     * Fourth is for action subject (site, link, database
     */
    public static final String RETRIEVED_TEMPLATE = "%s %s were retrieved from %s";
    public static final String WEBDOC_FAILED = "\nWeb document wasn't downloaded correctly!\n";
    @Autowired
    @Qualifier("configuredHtmlParserService")
    private HTMLParserService parserService;
    @Autowired
    private HttpClient httpClient;

    @PostMapping("/players")
    public String putPlayerSetAndTeamsToAppViaAPI(@RequestBody(required = false) List<Player> players) throws IOException {

        if (players == null || players.size() == 0) {
            Map<URL, Team> unsavedMap;
            Document doc = parserService.getWebDoc();
            Team temporalTeam;
            if (doc != null) {
                unsavedMap = parserService.retrieveTeams(doc);
            } else {
                log.error(WEBDOC_FAILED);
                return WEBDOC_FAILED + "The most possible reason is that link to site with teams is absent or incorrect\n" +
                        "PLease consider resetting it (it can be done with POST method at /autofill/setLink with <protocol://host:port> in the body";
            }
            if (unsavedMap == null || unsavedMap.size() == 0) {
                String errorReport = String.format(RETRIEVED_TEMPLATE, "No", "teams", parserService.getLinkToSiteWithTeams());
                log.error(errorReport);
                return errorReport;
            }


            log.info(String.format(RETRIEVED_TEMPLATE, unsavedMap.size(), "teams", parserService.getLinkToSiteWithTeams()));

            Map<URL, Team> savedMap = new HashMap<>(unsavedMap.size());

            for (Map.Entry<URL, Team> entry : savedMap.entrySet()) {
                temporalTeam = httpClient.saveTeam(entry.getValue());
                if ((temporalTeam == null) || (temporalTeam.getId() < 1)
                        || (!(temporalTeam.getTeamName().equals(entry.getValue().getTeamName())))) {
                    log.error("Team wasn't saved correctly!!\nIt will be skipped");
                    continue;
                }
                savedMap.put(entry.getKey(), temporalTeam);

            }

            log.info(String.format(RETRIEVED_TEMPLATE, savedMap.size(), "teams", "the database after saving"));
            if (savedMap.size() != unsavedMap.size()) {
                log.error("There are less teams were saved than attempted to save");
            }

            players = parserService.getPlayersListBySiteWithTeamList(savedMap);

        }
        return String.format("{\"is-success\":\"%s\"}", httpClient.savePlayers(players));
    }


    @PostMapping("/setLink")
    public String setNewTeamListSite(@RequestParam String link) {
        return String.format("{\"link\":\"%s\"}", parserService.setLinkToSiteWithTeams(link));
    }


    @PutMapping(value = {"/service/{connection}"})
    public String setServiceLink(@PathVariable(name = "connection") String connectionPath) {
        return String.format("{\"s-link\":\"%s\"}", httpClient.setInitialConnectionPath(connectionPath));
    }
}

